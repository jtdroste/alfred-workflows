<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>im.droste.james.btconnect</string>
	<key>connections</key>
	<dict>
		<key>DE5715D0-A64F-40CA-B5FE-B54AC59A466E</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>457F9D28-BCE7-4890-B0CB-F6C2EC021F04</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>James Droste</string>
	<key>description</key>
	<string></string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Bluetooth Connect</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>bt</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>1</integer>
				<key>queuemode</key>
				<integer>2</integer>
				<key>runningsubtext</key>
				<string>Loading...</string>
				<key>script</key>
				<string>from __future__ import print_function
import json
import re
import subprocess
import StringIO
import sys

BT_BIN = "/Users/james/.bin/BluetoothConnector"
MAC_REGEX = r"^(([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})) - (.*)"

def get_devices(binary=BT_BIN):
	try:
		output = subprocess.check_output([binary])
	except subprocess.CalledProcessError as e:
		return parse_help(StringIO.StringIO(e.output))


def parse_help(data):
	matches = []
	for line in data:
		match = re.match(MAC_REGEX, line)

		if not match:
			continue

		matches.append({
			'name': match.group(4),
			'addr': match.group(1)
		})

	return matches


def generate_output(data, search=None):
	out = {'items': []}

	for device in data:
		if search and not (search.upper() in device['name'].upper()):
			continue

		out['items'].append({
			'uid': device['addr'],
			'arg': device['addr'],
			'title': device['name'],
			'subtitle': device['addr'],
		})

	return out


if __name__ == "__main__":
	search = None
	if sys.argv[1]:
		search = sys.argv[1]

	out = generate_output(get_devices(), search)
	print(json.dumps(out))</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Connect to a (paired) bluetooth device</string>
				<key>title</key>
				<string>Bluetooth Connect</string>
				<key>type</key>
				<integer>3</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>DE5715D0-A64F-40CA-B5FE-B54AC59A466E</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>/Users/james/.bin/BluetoothConnector $1</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string>/Users/james/.bin/BluetoothConnector</string>
				<key>type</key>
				<integer>8</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>457F9D28-BCE7-4890-B0CB-F6C2EC021F04</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
	</array>
	<key>readme</key>
	<string></string>
	<key>uidata</key>
	<dict>
		<key>DE5715D0-A64F-40CA-B5FE-B54AC59A466E</key>
		<dict>
			<key>xpos</key>
			<integer>280</integer>
			<key>ypos</key>
			<integer>330</integer>
		</dict>
	</dict>
	<key>webaddress</key>
	<string>https://james.droste.im</string>
</dict>
</plist>
